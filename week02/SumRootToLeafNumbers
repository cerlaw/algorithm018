/**
 * https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/
 * 求根到叶子节点数字之和
 */
public class SumRootToLeafNumbers {
    /**
     * 深度优先搜索，时间负责度O(n)，空间复杂度O(n)
     * @param root
     * @return
     */
    public int solution(TreeNode root) {
        return dfs(root, 0);
    }

    public int dfs(TreeNode root, int preSum) {
        if (root == null) {
            return 0;
        }
        //每下一层相当于 上一层的值* 10 + 这一层的值
        preSum = preSum * 10 + root.val;
        if (root.left == null && root.right == null) {
            //叶子节点返回
            return preSum;
        }
        return dfs(root.left, preSum) + dfs(root.right, preSum);
    }

    /**
     * 广度优先，时间复杂度O(n)，空间复杂度O(n)
     * @param root
     * @return
     */
    public int sumNumbers(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int sum = 0;
        Queue<TreeNode> nodeQueue = new LinkedList<>();
        Queue<Integer> valQueue = new LinkedList<>();
        nodeQueue.offer(root);
        valQueue.offer(root.val);
        while (!nodeQueue.isEmpty()) {
            TreeNode node = nodeQueue.poll();
            int val = valQueue.poll();
            if (node.left == null && node.right == null) {
                sum += val;
            } else {
                if (node.left != null) {
                    nodeQueue.offer(node.left);
                    valQueue.offer(val * 10 + node.left.val);
                }

                if (node.right != null) {
                    nodeQueue.offer(node.right);
                    valQueue.offer(val * 10 + node.right.val);
                }
            }
        }
        return sum;
    }
}