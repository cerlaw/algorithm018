/**
 * 二叉树的前序遍历
 * https://leetcode-cn.com/problems/binary-tree-preorder-traversal/
 */
public class BinaryTreePreOrderTraversal {
    // public List<Integer> solution(TreeNode root) {
    //     //递归，时间复杂度O(n)，空间复杂度O(n)
    //     List<Integer> res = new ArrayList<>();
    //     preorderCore(root, res);
    //     return res;
    // }

    // public void preorderCore(TreeNode root, List<Integer> res) {
    //     if (root == null) {
    //         return;
    //     }
    //     res.add(root.val);
    //     preorderCore(root.left, res);
    //     preorderCore(root.right, res);
    // }

    public List<Integer> solution(TreeNode root) {
        //迭代，时间复杂度O(n),空间复杂度O(n)
        List<Integer> res = new ArrayList<>();
        if (root == null) {
            return res;
        }

        TreeNode tmp = root;
        Stack<TreeNode> stack = new Stack<>();
        while (!stack.isEmpty() || tmp != null) {
            while (tmp != null) {
                //先把自己的值放到list中
                res.add(tmp.val);
                //压入栈中
                stack.push(tmp);
                //遍历到最后一个左子节点
                tmp = tmp.left;
            }
            TreeNode node = stack.pop();
            //转到右节点
            tmp = node.right;
        }
        return res;
    }
}